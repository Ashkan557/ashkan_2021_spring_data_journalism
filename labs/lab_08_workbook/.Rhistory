(trip_part == "on_route" & fix == "cell")) %>%
mutate(datetime_rounded_hour = floor_date(datetime, "hour")) %>%
distinct(datetime_rounded_hour, .keep_all=TRUE) %>%
select(unique_stop_id:datetime, datetime_rounded_hour, everything())
# howard_06_week_1
# Stated ship time 9/21/2020 13:30:00
# Stated delivery time 9/28/20 16:30:00
# From post office at 4112 53rd Ave E, Bradenton, FL 34203
# to 210 3rd St W. Unit 8204 Bradenton, FL 34205
# Filter subset of data with historical position tracking for howard_06 between start and end time.
sample_all_points <- all_historical_position_data %>%
mutate(device_short_name = str_sub(device_name, start=1L, end=9L)) %>%
select(device_short_name, everything()) %>%
filter(device_short_name == "howard_06") %>%
filter(date >= "2020-09-21") %>%
filter(date <= "2020-09-28") %>%
filter(datetime >= "2020-09-21 9:00:00") %>%
filter(datetime <= "2020-09-28 14:00:00") %>%
mutate(trip_id = "howard_06_week_01") %>%
arrange(datetime) %>%
rowid_to_column("unique_stop_id") %>%
mutate(trip_part = case_when(unique_stop_id == 1 ~ "start",
unique_stop_id == 249 ~ "end",
TRUE ~ "on_route")) %>%
select(unique_stop_id,trip_id, date, datetime, latitude, longitude, address, fix, accuracy, trip_part) %>%
filter(unique_stop_id != 250)
# write it out
write_csv(sample_all_points, "data/sample_gps_data/sample_all_points.csv")
# Create subsets of the data using different methods to cull number of positions.
### GPS points only, with start and end
# Pros: very accurate.  Locations are exact.
# Cons: over 7 day trip from 9-21 to 9-28, no points at all on 9-22, only one on 9-23, none on 9-24, 9-25 or 9-26. 17 points total.
sample_gps_only <- sample_all_points %>%
filter((trip_part == "start" | trip_part == "end") |
(trip_part == "on_route" & fix == "gps"))
# write it out
write_csv(sample_gps_only, "data/sample_gps_data/sample_gps_only.csv")
### Any point with published accuracy of less than 100 meters
# Ends up being a combo of cell and wifi signals
# Pros: pretty accurate. All points within 100 meters of true. Most points substantially less than 100 meters.
# Cons: still have inconsistent times.  Generally no more than one point per hour, but getting gaps at certain periods.
sample_less_100_accuracy <- sample_all_points %>%
filter((trip_part == "start" | trip_part == "end") |
(trip_part == "on_route" & accuracy < 100))
# write it out
write_csv(sample_less_100_accuracy, "data/sample_gps_data/sample_less_100_accuracy.csv")
# Using only cellphone points.  When we have more than one cell signal per hour, use distinct() to keep only one. Still using GPS for start and end point.
# Pros: most consistent time tracking, essentially one point per hour in our data.
# Cons: Huge error bars for location proximity.  In some cases off by 2300 meters, which is a mile and a half. May get some "bounce", even when the device is probably stable, it looks like it moves because it's just switching to a different cell tower.
sample_cell_only <- sample_all_points %>%
filter((trip_part == "start" | trip_part == "end") |
(trip_part == "on_route" & fix == "cell")) %>%
mutate(datetime_rounded_hour = floor_date(datetime, "hour")) %>%
distinct(datetime_rounded_hour, .keep_all=TRUE) %>%
select(unique_stop_id:datetime, datetime_rounded_hour, everything())
# write it out
write_csv(sample_cell_only, "data/sample_gps_data/sample_cell_only.csv")
View(sample_gps_only)
View(sample_less_100_accuracy)
#knitr::opts_chunk$set(echo = TRUE)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
# Load libraries
library(tidyverse)
library(lubridate)
library(httr)
library(jsonlite)
library(leaflet)
library(leafem)
library(raster)
library(tigris)
library(DT)
library(htmltools)
library(rjson)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
leaflet(data=sample_gps_only) %>%
addTiles() %>%
leaflet(data=sample_gps_only) %>%
addTiles()
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
View(sample_gps_only)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_accuracy_less_100) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_less_100_accuracy) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_less_100_accuracy) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_less_100_accuracy$latitude, lng = sample_less_100_accuracy$longitude)
leaflet(data=sample_all_points) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_less_100_accuracy$latitude, lng = sample_less_100_accuracy$longitude)
leaflet(data=sample_all_points) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_all_points$latitude, lng = sample_all_points$longitude)
View(sample_cell_only)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_less_100_accuracy) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_less_100_accuracy$name, "<br>",
"Last Position: ", sample_less_100_accuracy$latitude,", ", sample_less_100_accuracy$longitude, "<br>",
"Last Address: ", sample_less_100_accuracy$address, "<br>",
"Last Ping Time: ", sample_less_100_accuracy$datetime,"<br>"
)) %>%
addPolylines(lat = sample_less_100_accuracy$latitude, lng = sample_less_100_accuracy$longitude)
leaflet(data=sample_gps_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_gps_only$name, "<br>",
"Last Position: ", sample_gps_only$latitude,", ", sample_gps_only$longitude, "<br>",
"Last Address: ", sample_gps_only$address, "<br>",
"Last Ping Time: ", sample_gps_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_gps_only$latitude, lng = sample_gps_only$longitude)
leaflet(data=sample_cell_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_cell_only$name, "<br>",
"Last Position: ", sample_cell_only$latitude,", ", sample_cell_only$longitude, "<br>",
"Last Address: ", sample_cell_only$address, "<br>",
"Last Ping Time: ", sample_cell_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_cell_only$latitude, lng = sample_cell_only$longitude)
leaflet(data=sample_all_points) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_all_points$name, "<br>",
"Last Position: ", sample_all_points$latitude,", ", sample_all_points$longitude, "<br>",
"Last Address: ", sample_all_points$address, "<br>",
"Last Ping Time: ", sample_all_points$datetime,"<br>"
)) %>%
addPolylines(lat = sample_all_points$latitude, lng = sample_all_points$longitude)
leaflet(data=sample_cell_only) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = paste("Name: ", sample_cell_only$name, "<br>",
"Last Position: ", sample_cell_only$latitude,", ", sample_cell_only$longitude, "<br>",
"Last Address: ", sample_cell_only$address, "<br>",
"Last Ping Time: ", sample_cell_only$datetime,"<br>"
)) %>%
addPolylines(lat = sample_cell_only$latitude, lng = sample_cell_only$longitude)
knitr::opts_chunk$set(echo = TRUE)
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
# If you are on a new machine you haven't used before, you may need to install these packages before loading.  If that's the case, remove the comment # from in front of the next two lines before running the codeblock, to install the packages before loading.
# install.packages('tidyverse')
# install.packages('vembedr')
# Load the tidyverse, vembedr
library(tidyverse)
library(vembedr)
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
setwd("~/Desktop/20_fall_data_journalism/labs/lab_05/lab_05_workbook")
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
# This code creates a new object called us_total_covid_cases
# It starts with covid_county
# It uses summarise() to create a single column, single row dataframe. The single column is called "total_cases". In this newly created "total_cases" column, all of the county case values are added together with sum() to produce one number.
us_total_covid_cases <- covid_county %>%
summarise(total_cases = sum(cases))
# This code displays the results of the code we created above
us_total_covid_cases
# Q: Which Maryland county had the highest case rate on August 30? What was the case rate (cases per 1000)?
# A: (Put the answer here)
# This code creates a new object called us_total_covid_deaths
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_deaths".
# In this newly created "total_deaths" column, we want to put together all of the county case values, which are stored in a column called "deaths", and add them together with sum() to produce one number.
# BUT, our sum() function is missing something important: the name of the column that contains the information we want to summarize.  Fix it
us_total_covid_deaths <- covid_county %>%
summarise(total_deaths = sum())
# This code displays the results of the code we created above
us_total_covid_deaths
# Q: How many total COVID deaths were there in the U.S. on August 30?
# A: (Put the answer here)
# This code creates a new object called us_total_covid_deaths
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_deaths".
# In this newly created "total_deaths" column, we want to put together all of the county case values, which are stored in a column called "deaths", and add them together with sum() to produce one number.
# BUT, our sum() function is missing something important: the name of the column that contains the information we want to summarize.  Fix it
us_total_covid_deaths <- covid_county %>%
summarise(total_deaths = sum(PUT_COLUMN_NAME_HERE))
# This code creates a new object called us_total_covid_deaths
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_deaths".
# In this newly created "total_deaths" column, we want to put together all of the county case values, which are stored in a column called "deaths", and add them together with sum() to produce one number.
# BUT, our sum() function is missing something important: the name of the column that contains the information we want to summarize. If we don't fix it, it will look like the answer is 0 deaths, which isn't correct.
us_total_covid_deaths <- covid_county %>%
summarise(total_deaths = sum(deaths))
# This code displays the results of the code we created above
us_total_covid_deaths
# Q: How many total COVID deaths were there in the U.S. on August 30?
# A: (Put the answer here)
# This code creates a new object called us_county_average_covid_cases
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "cases_in_average_county".
# In this newly created "cases_in_average_county" column, all of the county case values, which are stored in a column called "cases", are averged together with mean() function to produce one number.
us_county_average_covid_cases <- covid_county %>%
summarise(cases_in_average_county = mean(cases))
# This code displays the results of the code we created above
us_county_average_covid_cases
# Q: How many cases did the average U.S. county have on August 30?
# A: (Put the answer here)
# This code creates a new object called us_county_average_covid_cases
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "cases_in_average_county".
# In this newly created "cases_in_average_county" column, all of the county case values, which are stored in a column called "cases", are averged together with mean() function to produce one number.
us_county_average_covid_cases <- covid_county %>%
summarise(cases_in_average_county = mean(deaths))
# This code displays the results of the code we created above
us_county_average_covid_cases
# Q: How many cases did the average U.S. county have on August 30?
# A: (Put the answer here)
# This code creates a new dataframe object called least_covid_cases_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "total_cases"
# In this newly created "total_cases" column, it uses sum() to add up all of the values in the "cases" column in the original covid_county dataframe to create one value for each state.
# Then, it sorts the newly created dataframe from lowest to highest on total_cases
least_covid_cases_state <- covid_county %>%
group_by(state) %>%
summarise(total_cases = sum(cases)) %>%
arrange(total_cases)
# Display below
least_covid_cases_state
# Write the answer in a comment
# Q: Which state had the fewest total covid cases on August 30? How many cases?
# A:
# This code creates a new dataframe object called least_covid_deaths_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "total_cases"
# In this newly created "total_cases" column, it uses sum() to add up all of the values in the "cases" column in the original covid_county dataframe to create one value for each state.
# Then, it sorts the newly created dataframe from lowest to highest on total_cases
least_covid_deaths_state <- covid_county %>%
group_by() %>%
summarise(total_deaths = ) %>%
arrange(total_deaths)
# This code creates a new object called us_total_covid_deaths
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_deaths".
# In this newly created "total_deaths" column, we want to put together all of the county case values, which are stored in a column called "deaths", and add them together with sum() to produce one number.
# BUT, our sum() function is missing something important: the name of the column that contains the information we want to summarize. If we don't fix it, it will look like the answer is 0 deaths, which isn't correct.
us_total_covid_deaths <- covid_county %>%
summarise(total_deaths = sum())
# This code displays the results of the code we created above
us_total_covid_deaths
# Q: How many total COVID deaths were there in the U.S. on August 30?
# A: (Put the answer here)
# This code creates a new object called us_county_average_covid_cases
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "cases_in_average_county".
# In this newly created "cases_in_average_county" column, all of the county case values, which are stored in a column called "cases", are averged together with mean() function to produce one number.
us_county_average_covid_cases <- covid_county %>%
summarise(cases_in_average_county = mean(cases))
# This code displays the results of the code we created above
us_county_average_covid_cases
# Q: How many cases did the average U.S. county have on August 30?
# A: (Put the answer here)
# This code creates a new dataframe object called state_cases_in_average_county
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "cases_in_average_county"
# In this newly created "cases_in_average_county" column, all of the county case values, which are stored in a column called "cases", are averaged together with mean() function to produce one number for each state AND THEN
# Then, it sorts the newly created dataframe from lowest to highest on cases_in_average_county
state_cases_in_average_county <- covid_county %>%
group_by(state) %>%
summarise(cases_in_average_county = mean(cases)) %>%
arrange(cases_in_average_county)
# Display below
state_cases_in_average_county
# Write the answer in a comment
# Q: Which state had the fewest total covid cases on August 30? How many cases?
# A:
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "cases_in_average_county".
# In this newly created "cases_in_average_county" column, all of the county case values, which are stored in a column called "cases", are averged together with mean() function to produce one number.
us_county_average_covid_cases <- covid_county %>%
summarise(cases_in_average_county = mean(cases))
# This code creates a new dataframe object called counties_per_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "total_counties"
# In this newly created "total_counties" column, the number of rows for each state are counted with n() to produce one number for each state AND THEN
# arrange() it sorts the newly created dataframe from highest to lowest on total_counties by state.
# Group by state, count the number of rows, sort from highest to lowest
# I'll review what's happening here.
counties_per_state <- covid_county %>%
group_by(state) %>%
summarise(total_counties = n()) %>%
arrange(desc(total_counties))
# Display below
counties_per_state
# Write the answer in a comment
# Q: Which state has the most counties in our data? How many?
# A:
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
# This code creates a new object called us_total_covid_cases
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_cases".
# In this newly created "total_cases" column, all of the county case values, which are stored in a column called "cases", are added together with sum() to produce one number.
us_total_covid_cases <- covid_county %>%
summarise(total_cases = sum(cases))
# This code displays the results of the code we created above
us_total_covid_cases
# Q: How many total COVID cases were there in the U.S. on August 30?
# A: (Put the answer here)
View(us_total_covid_cases)
View(covid_county)
# This code creates a new object called us_total_covid_deaths
# It starts with covid_county AND THEN
# It uses summarise() to create a single column, single row dataframe.
# The single column in this new dataframe it creates is called "total_deaths".
# In this newly created "total_deaths" column, we want to put together all of the county case values, which are stored in a column called "deaths", and add them together with sum() to produce one number.
# BUT, our sum() function is missing something important: the name of the column that contains the information we want to summarize. If we don't fix it, it will look like the answer is 0 deaths, which isn't correct.
us_total_covid_deaths <- covid_county %>%
summarise(total_deaths = sum(deaths))
# This code displays the results of the code we created above
us_total_covid_deaths
# Q: How many total COVID deaths were there in the U.S. on August 30?
# A: (Put the answer here)
us_county_average_covid_deaths <- covid_county %>%
summarise(deaths_in_average_county = mean(deaths))
# Create a new object called us_county_average_covid_deaths and write the code necessary to answer the question.
us_county_average_covid_deaths <- covid_county %>%
summarise(deaths_in_average_county = mean(deaths))
# Write the code necessary to display us_county_average_covid_deaths below this codeblock
us_county_average_covid_deaths
# Q: How many **deaths** did the average U.S. county have on August 30?
# A: (Put the answer here)
us_county_average_covid_deaths <- covid_county %>%
summarise(deaths_in_average_county = mean(deaths))
View(us_county_average_covid_deaths)
# This code creates a new dataframe object called least_covid_cases_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "total_cases"
# In this newly created "total_cases" column, it uses sum() to add up all of the values in the "cases" column in the original covid_county dataframe to create one value for each state.
# Then, it sorts the newly created dataframe from lowest to highest on total_cases
least_covid_cases_state <- covid_county %>%
group_by(state) %>%
summarise(total_cases = sum(cases)) %>%
arrange(total_cases)
# Display below
least_covid_cases_state
# Write the answer in a comment
# Q: Which state had the fewest total covid cases on August 30? How many cases?
# A:
View(least_covid_cases_state)
# This code creates a new dataframe object called least_covid_deaths_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by() AND THEN
# It uses summarise(), creating a new column called "total_cases"
# In this newly created "total_deaths" column, it uses sum() to add up all of the values in the "deaths" column in the original covid_county dataframe to create one value for each state.
# Then, it sorts the newly created dataframe from lowest to highest on total_deaths.
# BUT..it has two errors you need to fix, detailed above.
least_covid_deaths_state <- covid_county %>%
group_by(state) %>%
summarise(total_deaths = sum(deaths)) %>%
arrange(total_deaths)
# Display below
least_covid_cases_state
# Write the answer in a comment
# Q: Which state had the fewest total covid deaths August 30? How many cases?
# A:d
# Create a new object called state_deaths_in_average_county and write the code necessary to answer the question.
state_deaths_in_average_county <- covid_county %>%
group_by(state) %>%
summarise(deaths_in_average_county = mean(deaths)) %>%
arrange(desc(deaths_in_average_county))
# Write the code necessary to display state_deaths_in_average_county below this codeblock
state_deaths_in_average_county
# Q:  Which state had the highest average deaths per county?
# A: (Put the answer here)
# Read in the data.
covid_county <- read_csv("data/covid_county_2020_08_30.csv")
glimpse()
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("E4lXmVIZgQE", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/E4lXmVIZgQE
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("E4lXmVIZgQE", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/E4lXmVIZgQE
# Video b
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("HeAaQ2ta1zw", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/HeAaQ2ta1zw
# Video c
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("jA_FUmfkPzs", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/jA_FUmfkPzs
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("yQRcEB1iDNk", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/yQRcEB1iDNk
# This code creates a new dataframe object called least_covid_deaths_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by() AND THEN
# It uses summarise(), creating a new column called "total_deaths"
# In this newly created "total_deaths" column, it uses sum() to add up all of the values in the "deaths" column in the original covid_county dataframe to create one value for each state.
# Then, it sorts the newly created dataframe from lowest to highest on total_deaths.
# BUT..it has two errors you need to fix, detailed above.
least_covid_deaths_state <- covid_county %>%
group_by() %>%
summarise(total_deaths = ) %>%
arrange(total_deaths)
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("https://youtu.be/cQacjtGG2_E", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/cQacjtGG2_E
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("cQacjtGG2_E", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/cQacjtGG2_E
# Video 1
# Click play to run the codeblock and the video will display in the markdown document.
embed_youtube("KQAEoppkAC8", width = "100%", height="480", frameborder = 0,
allowfullscreen = FALSE, query = NULL)
# If the video doesn't work here, load this URL in your browser:
# https://youtu.be/KQAEoppkAC8
# This code creates a new dataframe object called counties_per_state
# It starts with covid_county AND THEN
# It groups all of the counties in each state together, with group_by()
# It uses summarise(), creating a new column called "total_counties"
# In this newly created "total_counties" column, the number of rows for each state are counted with n() to produce one number for each state AND THEN
# arrange() it sorts the newly created dataframe from highest to lowest on total_counties by state.
# Group by state, count the number of rows, sort from highest to lowest
# I'll review what's happening here.
counties_per_state <- covid_county %>%
group_by(state) %>%
summarise(total_counties = n()) %>%
arrange(desc(total_counties))
# Display below
counties_per_state
# Write the answer in a comment
# Q: Which state has the most counties in our data? How many?
# A:
